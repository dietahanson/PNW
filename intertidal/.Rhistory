source('~/Documents/PNW/intertidal/rawtogroup.R')
sigspec
sigspec.tran
spnotquad
spnottran
spnotquad
source('~/Documents/PNW/intertidal/rawtogroup.R')
sigspec
head(tran.data)
head(tran.int)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
head(tran.data)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep, SpeciesNum)])
head(tran.data)
head(tran.int)
head(tran_agg)
head(tran)
sp.tran
merge(data.frame(sp.tran), species[,c("SpeciesNum", "SpeciesName")], by = "SpeciesNum")
merge(data.frame(SpeciesNum=sp.tran), species[,c("SpeciesNum", "SpeciesName")], by = "SpeciesNum")
head(species)
sp.tran
merge(data.frame(SpeciesNum=sp.tran), species[,c("SpeciesNum", "SpeciesName")], by = "SpeciesNum")
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep, SpeciesNum)])
head(tran.data)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
head(tran.data)
tran.data
tran.data$area = (tran.data$beltnum*5)*0.5
tran.area
tran.data
# now add area to tran
tran.int = data.table(merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T))
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
totalarea = data.table(totalarea)
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
head(totalareabyreef)
tran_agg = as.data.frame(tran.int[, list(specsum = sum(BeltAbundance)),
by = list(ReefNum, SpeciesNum)])
tran_agg = merge(tran_agg, totalareabyreef[,c("ReefNum", "smax")],
by = "ReefNum", all.x = T)
head(tran_agg)
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg = sapply(tran_agg, function(x) (if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax
}))
tran_agg[1]
tran_agg[1,]
tran_agg[1,]$SpeciesNum
tran_agg[1,]$SpeciesNum %in% c(3,62,89,105,128,132,181)
tran_agg[6,]$SpeciesNum %in% c(3,62,89,105,128,132,181)
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg = apply(tran_agg,1, function(x) (if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax
}))
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg = lapply(tran_agg, function(x) (if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
}))
is.data.frame(tran_agg)
is.data.table(tran_agg)
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg = apply(tran_agg,1, function(x) (if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
}))
head(tran_agg)
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg = apply(tran_agg,1, function(x) if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
})
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = apply(tran_agg,1, function(x) if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
})
tran_agg[6,]$SpeciesNum %in% c(3,62,89,105,128,132,181)
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = apply(tran_agg,1, function(x) if (tran_agg[x,]$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
})
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = apply(tran_agg,1, function(x) x$SpeciesNum %in% c(3,62,89,105,128,132,181))
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = lapply(tran_agg, function(x) if (x$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
})
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = lapply(tran_agg, function(x) if (x["SpeciesNum"] %in% c(3,62,89,105,128,132,181)) {
x$smax = x$smax*2
} else {
x$smax = x$smax*1
})
# have to double total area for kelps (transects were 2 meters wide, not 1)
tran_agg$newarea = lapply(tran_agg, function(x) if (x["SpeciesNum"] %in% c(3,62,89,105,128,132,181)) {
x["smax"] = x["smax"]*2
} else {
x["smax"] = x["smax"]*1
})
head(tran_agg)
for (i in 1:nrow(tran_agg)) {
if (tran_agg[i,]$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
tran_agg[i,]$smax = tran_agg[i,]$smax*2
} else {
tran_agg[i,]$smax = tran_agg[i,]$smax
}
}
notspecies
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
tran.data$area = (tran.data$beltnum*5)*0.5
# now add area to tran
tran.int = data.table(merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T))
# add reef data because we summarize by reef, not transect
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
# now get total area for each reef (calculations allow for each belt rep of
# a transect to have a different area, in case this ever happens)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
totalarea = data.table(totalarea)
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
# aggregate species by reef
tran_agg = as.data.frame(tran.int[, list(specsum = sum(BeltAbundance)),
by = list(ReefNum, SpeciesNum)])
# add total area
tran_agg = merge(tran_agg, totalareabyreef[,c("ReefNum", "smax")],
by = "ReefNum", all.x = T)
tran_agg[6,]
for (i in 1:nrow(tran_agg)) {
if (tran_agg[i,]$SpeciesNum %in% c(3,62,89,105,128,132,181)) {
tran_agg[i,]$smax = tran_agg[i,]$smax*2
} else {
tran_agg[i,]$smax = tran_agg[i,]$smax
}
}
tran_agg[6,]
# calculate density
tran_agg$specden = tran_agg$specsum/tran_agg$smax
reefspec.tran = expand.grid(ReefNum=unique(tran_agg$ReefNum),  # every species/reef
SpeciesNum=unique(tran_agg$SpeciesNum))
trantotal = merge(tran_agg, reefspec.tran, by=c("ReefNum", "SpeciesNum"),
all.x = T, all.y = T)
trantotal[is.na(trantotal$specden),"specden"] <- 0
trantotal = merge(trantotal, reefs[,c("ReefNum", "RegionName")],
by = "ReefNum", all.x = T)
sp.tran = unique(trantotal$SpeciesNum)
reg.tran = levels(trantotal$RegionName)
trantotal$pval = 0
for (w in 1:length(sp.tran)) {  # loop over species
spnum = sp.tran[w]
test = t.test(trantotal[trantotal$SpeciesNum==spnum,]$specden ~
trantotal[trantotal$SpeciesNum==spnum,]$RegionName)
pval = test$p.value
trantotal[trantotal$SpeciesNum==spnum,]$pval = pval
}
sigspec.tran = trantotal[(trantotal$pval<0.05) &
(!is.na(trantotal$pval)),]
sigspec.tran = merge(sigspec.tran, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum", all.x = T, all.y = F)
sigspec.tran
spnotquad
# species in transects but not in quads
spnotquad = data.frame(SpeciesNum=sp.tran[which(sp.tran %in% sp)])
spnotquad = merge(spnotquad, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum")
spnotquad
# species in both quads and transects
spboth = data.frame(SpeciesNum=sp[which(sp.tran %in% sp)])
spboth = merge(spboth, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum")
spboth
# species in both quads and transects
spboth = data.frame(SpeciesNum=sp.tran[which(sp.tran %in% sp)])
spboth = merge(spboth, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum")
spboth
sp
merge(sp, species)
spboth
merge(data.frame(SpeciesNum=sp), species[,c("SpeciesNum", "SpeciesName")]
)
spboth
head(trantotal)
spboth$SpeciesNum %in% trantotal$SpeciesNum
trantotal$SpeciesNum %in% spboth$SpeciesNum
trantotal[trantotal$SpeciesNum %in% spboth$SpeciesNum]
trantotal[trantotal$SpeciesNum %in% spboth$SpeciesNum,]
trantotal[trantotal$SpeciesNum %in% spboth$SpeciesNum,]$SpeciesNum
unique(trantotal[trantotal$SpeciesNum %in% spboth$SpeciesNum,]$SpeciesNum)
spboth
transubset = trantotal[trantotal$SpeciesNum %in% spboth$SpeciesNum,]
head(transubset)
transubset$specsum = NULL
transubset$smax = NULL
quadsubset = quadall[quadall$SpeciesNum %in% spboth$SpeciesNum,]
head(quadsubset)
quadsubset$specsum = NULL
quadsubset$quad.count = NULL
head(quadsubset)
head(transubset)
transubset$type = "transect"
quadsubset$type = "quad"
colnames(transubset)
if (colnames(transubset)==colnames(quadsubset)) {
overlapsp = rbind(transubset, quadsubset)
} else {
print("quadsubset and transubset have different columns, do not merge")
}
rm(overlapsp)
colnames(transubset)==colnames(quadsubset)
sum(colnames(transubset)==colnames(quadsubset))
sum(colnames(transubset)==colnames(quadsubset))==ncol(quadsubset)
rm(overlapsp)
if (sum(colnames(transubset)==colnames(quadsubset))==ncol(quadsubset)) {
overlapsp = rbind(transubset, quadsubset)
} else {
print("quadsubset and transubset have different columns, do not merge")
}
overlapsp
overlapsp[overlapsp$SpeciesNum==3,]
t.test(overlapsp[overlapsp$SpeciesNum==3,]$RegionName, overlapsp[overlapsp$SpeciesNum==3,]$specden)
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden, overlapsp[overlapsp$SpeciesNum==3,]$RegionName)
overlapsp[overlapsp$SpeciesNum==3,]$specden
overlapsp[overlapsp$SpeciesNum==3,]$RegionName
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden~overlapsp[overlapsp$SpeciesNum==3,]$RegionName)
spboth
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden~overlapsp[overlapsp$SpeciesNum==27,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden~overlapsp[overlapsp$SpeciesNum==28,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden~overlapsp[overlapsp$SpeciesNum==36,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==3,]$specden~overlapsp[overlapsp$SpeciesNum==37,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==27,]$specden~overlapsp[overlapsp$SpeciesNum==27,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==28,]$specden~overlapsp[overlapsp$SpeciesNum==28,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==36,]$specden~overlapsp[overlapsp$SpeciesNum==36,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==37,]$specden~overlapsp[overlapsp$SpeciesNum==37,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==46,]$specden~overlapsp[overlapsp$SpeciesNum==46,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==57,]$specden~overlapsp[overlapsp$SpeciesNum==57,]$RegionName)
spboth
t.test(overlapsp[overlapsp$SpeciesNum==62,]$specden~overlapsp[overlapsp$SpeciesNum==62,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==86,]$specden~overlapsp[overlapsp$SpeciesNum==86,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==89,]$specden~overlapsp[overlapsp$SpeciesNum==89,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==102,]$specden~overlapsp[overlapsp$SpeciesNum==102,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==105,]$specden~overlapsp[overlapsp$SpeciesNum==105,]$RegionName)
spboth
t.test(overlapsp[overlapsp$SpeciesNum==121,]$specden~overlapsp[overlapsp$SpeciesNum==121,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==128,]$specden~overlapsp[overlapsp$SpeciesNum==128,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==132,]$specden~overlapsp[overlapsp$SpeciesNum==132,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==161,]$specden~overlapsp[overlapsp$SpeciesNum==161,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==168,]$specden~overlapsp[overlapsp$SpeciesNum==168,]$RegionName)
t.test(overlapsp[overlapsp$SpeciesNum==186,]$specden~overlapsp[overlapsp$SpeciesNum==186,]$RegionName)
sigspec.tran
sigspec
spboth
quadall[quadall$SpeciesNum==161,]
quadall[quadall$SpeciesNum==168,]
trantotal[trantotal$SpeciesNum==168,]
quadall[quadall$SpeciesNum==161,]
trantotal[trantotal$SpeciesNum==161,]
1/6
1/30
overlapsp[overlapsp$SpeciesNum==161,]
overlapsp[overlapsp$SpeciesNum==168,]
overlapsp[overlapsp$SpeciesNum==3,]
overlapsp[overlapsp$SpeciesNum==27,]
overlapsp[overlapsp$SpeciesNum==28,]
quad.data[quad.data$SpeciesNum==161,]
1/.5
quad_agg[quad_agg$SpeciesNum==161,]
head(quad)
1/12
1/6
sects
quad[quad$TranNum==1,]
quad[quad$TranNum==1,]$QuadNum
quad[quad$TranNum==2,]$QuadNum
1/6
quad[quad$TranNum==4,]$QuadNum
6/.5
6*.5
1/3
tran[tran$SpeciesNum==161,]
sects
tran[tran$TranNum==1,]
tran[tran$TranNum==3,]
tran[tran$TranNum==3,]$BeltDistStop
tran[tran$TranNum==3&tran$BeltDistStop==20,]$BeltDistStop
tran[tran$TranNum==3&tran$BeltDistStop==20,]
tran[tran$TranNum==4,]
tran[tran$TranNum==5,]
tran[tran$TranNum==6,]
tran[tran$SpeciesNum==161,]
trantotal[trantotal$SpeciesNum==161,]
3/70+40
3/(70+40)
sects
overlapsp
overlapsp[overlapsp$SpeciesNum==3 & overlapsp$ReefNum==4,]
overlapmean = data.table(overlapsp)
?mean
mean(1,2,3)
mean(c(1,2,3))
overlapmean = as.data.frame(overlapmean[, list(meandensity = mean(specden)),
by = list(ReefNum, SpeciesNum)])
head(overlapmean)
overlapsp[overlapsp$SpeciesNum==27 & overlapsp$ReefNum==4,]
6.29+10.33
16.62/2
overlapmean = data.table(overlapsp)
overlapmean = as.data.frame(overlapmean[, list(meandensity = mean(specden)),
by = list(ReefNum, SpeciesNum, RegionName)])
overlapmean
overlapmean[overlapmean$SpeciesNum==3,]
overlapsp[overlapsp$SpeciesNum==3,]
.33+2.16
2.49/2
.008/2
.067/2
.183+1.67
1.853/2
# do t-tests on mean data
oversp = unique(overlapmean$SpeciesNum)
overreg = levels(overlapmean$RegionName)
overlapmean$pval = 0
for (w in 1:length(oversp)) {  # loop over species
spnum = oversp[w]
test = t.test(overlapmean[overlapmean$SpeciesNum==spnum,]$meandensity ~
overlapmean[overlapmean$SpeciesNum==spnum,]$RegionName)
pval = test$p.value
overlapmean[overlapmean$SpeciesNum==spnum,]$pval = pval
}
sigspec.overlap = overlapmean[(overlapmean$pval<0.05) &
(!is.na(overlapmean$pval)),]
sigspec.overlap = merge(sigspec.overlap, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum", all.x = T, all.y = F)
sigspec.overlap
overlapmean
