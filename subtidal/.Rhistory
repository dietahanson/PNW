is.data.table(numquad)
tran.int = data.frame(tran.int)
is.data.table(tran.int)
tranall = merge(tran_agg, tran.int[,c("ReefNum", "totalarea")],
by.x = "ReefNum",by.y = "ReefNum", all.x = T, all.y = F)
tran.int
tran.int[,c("ReefNum", "totalarea")]
unique(tran.int[,c("ReefNum", "totalarea")])
head(tran.int)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
tran.data$area = (tran.data$beltnum*5)*0.5
# now add area to tran
tran.int = merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T)
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
head(tran.int)
tran.int[tran.int$ReefNum==6,]
tran.int[tran.int$ReefNum==1,]
tran.int[tran.int$ReefNum==16,]
tran.int[tran.int$ReefNum==19,]
tran.int$totalarea = 0
for (i in unique(tran.int$TranNum)) {
tran.int[tran.int$TranNum==i,]$totalarea =
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==1,]$area) +
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==2,]$area)
}
tran.int = data.table(tran.int)
tran_agg = as.data.frame(tran.int[, list(specsum = sum(BeltAbundance)),
by = list(ReefNum, SpeciesNum)])
head(tran.int)
tran.int$totalareatran = 0
for (i in unique(tran.int$TranNum)) {
tran.int[tran.int$TranNum==i,]$totalarea =
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==1,]$area) +
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==2,]$area)
}
tran.int$totalareatran = 0
for (i in unique(tran.int$TranNum)) {
tran.int[tran.int$TranNum==i,]$totalarea =
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==1,]$area) +
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==2,]$area)
}
head(tran.int)
for (i in unique(tran.int$TranNum)) {
tran.int[tran.int$TranNum==i,]$totalareatran =
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==1,]$area) +
unique(tran.int[tran.int$TranNum==i & tran.int$BeltRep==2,]$area)
}
head(tran.int)
sects
j = unique(tran.int$ReefNum)
j
j = unique(tran.int$ReefNum)[1]
j
sects
sigspec
j
unique(tran.int[tran.int$ReefNum==j,]$TranNum)
unique(tran.int[tran.int$ReefNum==16,]$TranNum)
union(tran.int[tran.int$ReefNum==6,]$TranNum, tran.int[tran.int$ReefNum==6,]$BeltRep)
tran.int$uniqueid = paste(tran.int$ReefNum, tran.int$TranNum, tran.int$BeltRep)
head(tran.int)
is.data.table(tran.int)
totalarea = as.data.frame(tran.int[, list(reeftotalarea =
sum(area)),
by = uniqueid])
totalarea
totalarea = as.data.frame(tran.int[, list(reeftotalarea =
sum(area)),
by = list(uniqueid, ReefNum)])
totalarea
head(tran.int)
unique(tran.int[,c("area","uniqueid")])
unique(tran.int[,c("area","uniqueid"), without = F])
unique(tran.int[,c("area","uniqueid"), within = F])
unique(tran.int[,c("area","uniqueid"), with = F])
head(tran.int, 20)
head(tran.int, 20)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
totalarea
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
totalarea = data.table(totalarea)
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
totalareabyreef
sects
tran[tran$TranNum==9,]
tran[tran$TranNum==10,]
head(tran.int)
head(tran.data)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
tran.data$area = (tran.data$beltnum*5)*0.5
# now add area to tran
tran.int = merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T)
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
tran.data$area = (tran.data$beltnum*5)*0.5
# now add area to tran
tran.int = data.table(merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T))
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
totalarea = data.table(totalarea)
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
head(tran.int)
totalareabyreef
tran.int = merge(tran.int, totalareabyreef[,c("ReefNum", "smax")],
by = "ReefNum", all.x = T)
head(tran.int)
tran_agg = as.data.frame(tran.int[, list(specsum = sum(BeltAbundance)),
by = list(ReefNum, SpeciesNum)])
head(tran_agg)
tran_agg = merge(tran_agg, totalareabyreef[,c("ReefNum", "smax")],
by = "ReefNum", all.x = T)
head(tran_agg)
sects
reefs
tran_agg = merge(tran_agg, reefs[,c("ReefNum", "RegionName")],
by = "ReefNum", all.x = T)
head(tran_agg)
tran_agg$specden = tran_agg$specsum/tran_agg$smax
head(tran_agg)
reefspec.tran = expand.grid(ReefNum=unique(tran_agg$ReefNum),  # every species/reef
SpeciesNum=unique(tran_agg$SpeciesNum))
reefspec.tran
unique(tran$SpeciesNum)
unique(tran$ReefNum)
totalareabyreef
trantotal = merge(tran_agg, reefspec.tran, by=c("ReefNum", "SpeciesNum"),
all.x = T, all.y = T)
trantotal[is.na(trantotal$specden),"specden"] <- 0
trantotal = merge(trantotal, reefs[,c("ReefNum", "RegionName")],
by = "ReefNum", all.x = T)
head(trantotal)
tran.data = data.table(tran)
# get total area of each rep of each transect
tran.data = as.data.frame(tran.data[, list(mindist = min(BeltDistStart),
maxdist = max(BeltDistStop),
beltnum = length(unique(
BeltDistStart))),
by = list(TranNum, BeltRep)])
tran.data$area = (tran.data$beltnum*5)*0.5
# now add area to tran
tran.int = data.table(merge(tran, tran.data[,c("TranNum", "BeltRep", "area")],
by = c("TranNum", "BeltRep"), all.x = T))
# add reef data because we summarize by reef, not transect
tran.int = merge(tran.int, sects[,c("TranNum", "ReefNum")],
by = "TranNum",
all.x = T)
# now get total area for each reef (calculations allow for each belt rep of
# a transect to have a different area, in case this ever happens)
totalarea = as.data.frame(tran.int[, list(maxarea =
max(area), minarea=min(area)),
by = list(TranNum, ReefNum, BeltRep)])
totalarea = data.table(totalarea)
totalareabyreef = as.data.frame(totalarea[, list(smax=sum(maxarea), smin=sum(minarea)),
by = list(ReefNum)])
# aggregate species by reef
tran_agg = as.data.frame(tran.int[, list(specsum = sum(BeltAbundance)),
by = list(ReefNum, SpeciesNum)])
# add total area
tran_agg = merge(tran_agg, totalareabyreef[,c("ReefNum", "smax")],
by = "ReefNum", all.x = T)
# calculate density
tran_agg$specden = tran_agg$specsum/tran_agg$smax
# we need to make zeros for cases where a species was searched for but not
# found in a transect
reefspec.tran = expand.grid(ReefNum=unique(tran_agg$ReefNum),  # every species/reef
SpeciesNum=unique(tran_agg$SpeciesNum))
trantotal = merge(tran_agg, reefspec.tran, by=c("ReefNum", "SpeciesNum"),
all.x = T, all.y = T)
trantotal[is.na(trantotal$specden),"specden"] <- 0
# add regions
trantotal = merge(trantotal, reefs[,c("ReefNum", "RegionName")],
by = "ReefNum", all.x = T)
head(trantotal)
sp.tran = unique(tranall$SpeciesNum)
reg.tran = levels(tranall$RegionName)
tranall$pval = 0
for (w in 1:length(sp.tran)) {  # loop over species
spnum = sp[w]
test = t.test(tranall[tranall$SpeciesNum==spnum,]$specden ~
tranall[tranall$SpeciesNum==spnum,]$RegionName)
pval = test$p.value
tranall[tranall$SpeciesNum==spnum,]$pval = pval
}
trantotal$pval = 0
for (w in 1:length(sp.tran)) {  # loop over species
spnum = sp[w]
test = t.test(trantotal[trantotal$SpeciesNum==spnum,]$specden ~
trantotal[trantotal$SpeciesNum==spnum,]$RegionName)
pval = test$p.value
trantotal[trantotal$SpeciesNum==spnum,]$pval = pval
}
levels(trantotal$RegionName)
for (w in 1:length(sp.tran)) {  # loop over species
spnum = sp.tran[w]
test = t.test(trantotal[trantotal$SpeciesNum==spnum,]$specden ~
trantotal[trantotal$SpeciesNum==spnum,]$RegionName)
pval = test$p.value
trantotal[trantotal$SpeciesNum==spnum,]$pval = pval
}
sigspec.tran = trantotal[(trantotal$pval<0.05) &
(!is.na(trantotal$pval)),]
sigspec.tran = merge(sigspec.tran, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum", all.x = T, all.y = F)
sigspec.tran
sp.tran
sp
sp.tran %in% sp
which(sp.tran %in% sp)
which(!sp.tran %in% sp)
sp.tran[which(!sp.tran %in% sp)]
spintrannotinquad = sp.tran[which(!sp.tran %in% sp)]
merge(spintrannotinquad, species[,c("SpecNum", "SpeciesName")])
spintrannotinquad = data.frame(SpecNum=sp.tran[which(!sp.tran %in% sp)])
spintrannotinquad
merge(spintrannotinquad, species[,c("SpecNum", "SpeciesName")])
merge(spintrannotinquad, species[,c("SpecNum", "SpeciesName")], by = "SpecNum")
head(species)
spintrannotinquad = data.frame(SpeciesNum=sp.tran[which(!sp.tran %in% sp)])
merge(spintrannotinquad, species[,c("SpeciesNum", "SpeciesName")], by = "SpeciesNum")
# species in quads but not in transects
spnottran = data.frame(SpeciesNum=sp[which(!sp %in% sp.tran)])
spnottran
sp
sp.tran
tran = read.csv(file = "spencer_raw/bcoraw_BeltTran.csv")
head(tran)
unique(tran$SpeciesNum)
sp.tran
spnottran = merge(spnottran, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum")
spnottran
unique(tran$TranNum)
sigspec.tran
sects
sp
length(sp)
spnotquad
# species in transects but not in quads
spnotquad = data.frame(SpeciesNum=sp.tran[which(!sp.tran %in% sp)])
spnotquad = merge(spnotquad, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum")
spnotquad
notspecies
notspecies$SpeciesNum %in% sp.tran
sp.tran %in% notspecies$SpeciesNum
quad_agg
head(quadall)
head(quad.data)
quad.data[quad.data$TranNum==10,]
quadraw = read.csv("subtidal_quadrat_raw.csv", stringsAsFactors = F)
setwd("~/Documents/PNW/subtidal/")
quadraw = read.csv("subtidal_quadrat_raw.csv", stringsAsFactors = F)
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
quadraw = read.csv("subtidal_quadrat_raw.csv", stringsAsFactors = F)
head(quadraw)
unique(quadraw$region)
unique(quadraw$location)
unique(quadraw$site)
quadraw = quadraw[!quadraw$region=="Clayquot Sound",]
unique(quadraw$region)
unique(quadraw$location)
unique(quadraw$site)
?expand.grid
quadraw[quadraw$location=="George Fraser Island",]
unique(quadraw[quadraw$location=="George Fraser Island",]$site)
unique(quadraw$location)
unique(quadraw[quadraw$location=="Grassy Island",]$site)
unique(quadraw[quadraw$location=="Bluestone/Prasiola/Execution",]$site)
unique(quadraw[quadraw$location=="Mortons",]$site)
unique(quadraw[quadraw$location=="Seppings-Haines",]$site)
unique(quadraw[quadraw$location=="Spring Island",]$site)
tranraw = read.csv("subtidal_transect_raw.csv", stringsAsFactors = F)
tranraw = read.csv("subtidal_transect_raw.csv", stringsAsFactors = F)
unique(tranraw$location)
unique(tranraw$region)
# remove Clayquot data
tranraw = tranraw[!tranraw$region=="Clayquot Sound",]
head(quadraw)
unique(quadraw$id)
quadraw[quadraw$id==34,]
unique(quadraw$id)
quadraw[quadraw$id==35,]
unique(quadraw$id)
quadraw[quadraw$id==7,]
quadraw[quadraw$site=="Bluestone",]
quadraw[quadraw$id==1,]
quadraw[!is.na(quadraw$percent_cov),]
quadraw[!is.na(quadraw$percent_cov),]$species
unique(quadraw[!is.na(quadraw$percent_cov),]$species)
numspec = unique(quadraw[!is.na(quadraw$number),]$species)
numspec
?match
coversp = unique(quadraw[!is.na(quadraw$percent_cov),]$species)
numsp = unique(quadraw[!is.na(quadraw$number),]$species)
bothspec = match(coversp, numsp)
bothspec
coversp %in% numsp
numsp %in% coversp
numsp[numsp %in% coversp]
coversp[coversp %in% numsp]
quaddt = data.table(quadraw)
head(quaddt)
quaddt = as.data.frame(quaddt[,list(quadtotal = length(unique(id)),
by = list(site, location))])
quaddt
quaddt = as.data.frame(quaddt[,list(quadtotal = length(unique(id))),
by = list(site)])
quaddt = data.table(quadraw)
quaddt = as.data.frame(quaddt[,list(quadtotal = length(unique(id))),
by = list(site)])
quaddt
quadraw[quadraw$site=="Prasiola",]
quadraw[quadraw$site=="Prasiola",]$id
unique(quadraw[quadraw$site=="Prasiola",]$id)
quaddt
quadraw = merge(quadraw, quaddt, by = "site", all.x = T)
head(quadraw)
quaddt = as.data.frame(quaddt[,list(sitequadtotal = length(unique(id))),
by = list(site)])
quaddt = data.table(quadraw)
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
quadraw
head(quadraw)
quadraw[quadraw$id==1,]
quadagg = as.data.frame(quadraw[, list(quadsum = sum(number)),
by = list(id, SpeciesNum)])
quadagg = as.data.frame(quadraw[, list(quadsum = sum(number)),
by = list(id, species)])
is.data.table(quadraw)
quadagg = data.table(quadraw)
quadagg = as.data.frame(quadagg[, list(quadsum = sum(number)),
by = list(id, species)])
head(quadagg)
quadagg[quadagg$id==1,]
quadagg = merge(quadagg, quadraw[,c("id", "site")], by = "id", all.x = T)
quadagg = data.table(quadraw)
quadagg = as.data.frame(quadagg[, list(quadsum = sum(number)),
by = list(id, species)])
quadagg = merge(quadagg, quadraw[,c("id", "site")], by = "id", all.x = T, all.y = F)
quadraw[,c("id","site")]
unique(quadraw[,c("id","site")])
quadagg = data.table(quadraw)
quadagg = as.data.frame(quadagg[, list(quadsum = sum(number)),
by = list(id, species)])
quadagg = merge(quadagg, unique(quadraw[,c("id", "site")]), by = "id", all.x = T, all.y = F)
head(quadagg)
is.data.table(quadagg)
siteagg = data.table(quadagg)
siteagg = as.data.frame(siteagg[, list(sitesum = sum(quadsum)),
by = list(id, species)])
siteagg
siteagg = data.table(quadagg)
rm(siteagg)
siteagg = data.table(quadagg)
siteagg = as.data.frame(siteagg[, list(sitesum = sum(quadsum)),
by = list(site, species)])
head(siteagg)
quadagg[quadagg$species=="Nereocystis luetkeana" & quadagg$site=="Bluestone",]
head(quaddt)
# add total number of quadrats to calculate density
siteagg = merge(siteagg, quaddt, by = "site", all.x = T)
head(siteagg)
siteagg$density = siteagg$sitesum/siteagg$sitequadtotal
head(siteagg)
siteagg = merge(siteagg, quadraw[,c("site", "region")], by = "site", all.x = T)
# now aggregate species by site
siteagg = data.table(quadagg)
siteagg = as.data.frame(siteagg[, list(sitesum = sum(quadsum)),
by = list(site, species)])
# add total number of quadrats to calculate density
siteagg = merge(siteagg, quaddt, by = "site", all.x = T)
siteagg$density = siteagg$sitesum/siteagg$sitequadtotal
# add in region info
siteagg = merge(siteagg, unique(quadraw[,c("site", "region")]), by = "site", all.x = T)
head(siteagg)
sitespec = expand.grid(site=unique(siteagg$site),  # every species/reef
species=unique(siteagg$species))
head(sitespec)
head(siteagg)
quadtotal = merge(siteagg, sitespec, by=c("site", "species"),
all.x = T, all.y = T)
head(quadtotal)
quadtotal[is.na(quadtotal$density),"density"] <- 0
head(quadtotal)
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
head(quadtotal)
# do t tests to look for differences between regions
sp = unique(quadtotal$species)
reg = levels(quadtotal$region)
quadtotal$pval = 0
for (w in 1:length(sp)) {  # loop over species
spnum = sp[w]
test = t.test(quadtotal[quadtotal$species==spnum,]$density ~
quadtotal[quadtotal$species==spnum,]$region)
pval = test$p.value
quadtotal[quadtotal$species==spnum,]$pval = pval
}
sigspec = quadtotal[(quadtotal$pval<0.05) &
(!is.na(quadtotal$pval)),]
sigspec
sigspec[order(sigspec$species),]
sigspec[order(sigspec$species, sigspec$region),]
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
setwd("~/Documents/PNW/subtidal/")
quadraw = read.csv("subtidal_quadrat_raw.csv", stringsAsFactors = F)
# remove Clayquot data
quadraw = quadraw[!quadraw$region=="Clayquot Sound",]
# how are species measured? number or percent cover?
coversp = unique(quadraw[!is.na(quadraw$percent_cov),]$species)
numsp = unique(quadraw[!is.na(quadraw$number),]$species)
coversp[coversp %in% numsp]
numsp[numsp %in% coversp]
# get total number of quads per site
quaddt = data.table(quadraw)
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
setwd("~/Documents/PNW/subtidal/")
library(data.table)
quadraw = read.csv("subtidal_quadrat_raw.csv", stringsAsFactors = F)
# remove Clayquot data
quadraw = quadraw[!quadraw$region=="Clayquot Sound",]
# how are species measured? number or percent cover?
coversp = unique(quadraw[!is.na(quadraw$percent_cov),]$species)
numsp = unique(quadraw[!is.na(quadraw$number),]$species)
coversp[coversp %in% numsp]
numsp[numsp %in% coversp]
# get total number of quads per site
quaddt = data.table(quadraw)
quaddt = as.data.frame(quaddt[,list(sitequadtotal = length(unique(id))),
by = list(site)])
quadagg = data.table(quadraw)
quadagg = as.data.frame(quadagg[, list(quadsum = sum(number)),
by = list(id, species)])
quadagg = merge(quadagg, unique(quadraw[,c("id", "site")]),
by = "id", all.x = T, all.y = F)
siteagg = data.table(quadagg)
siteagg = as.data.frame(siteagg[, list(sitesum = sum(quadsum)),
by = list(site, species)])
# add total number of quadrats to calculate density
siteagg = merge(siteagg, quaddt, by = "site", all.x = T)
siteagg$density = siteagg$sitesum/siteagg$sitequadtotal
# we need to make zeros for cases where a species was searched for but not
# found in a quadrat
sitespec = expand.grid(site=unique(siteagg$site),  # every species/reef
species=unique(siteagg$species))
quadtotal = merge(siteagg, sitespec, by=c("site", "species"),
all.x = T, all.y = T)
quadtotal[is.na(quadtotal$density),"density"] <- 0
# add in region info
quadtotal = merge(quadtotal, unique(quadraw[,c("site", "region")]),
by = "site", all.x = T)
# do t tests to look for differences between regions
sp = unique(quadtotal$species)
reg = levels(quadtotal$region)
quadtotal$pval = 0
for (w in 1:length(sp)) {  # loop over species
spnum = sp[w]
test = t.test(quadtotal[quadtotal$species==spnum,]$density ~
quadtotal[quadtotal$species==spnum,]$region)
pval = test$p.value
quadtotal[quadtotal$species==spnum,]$pval = pval
}
sigspec = quadtotal[(quadtotal$pval<0.05) &
(!is.na(quadtotal$pval)),]
#sigspec = merge(sigspec, species[,c("SpeciesNum", "SpeciesName")],
by = "SpeciesNum", all.x = T, all.y = F)
sigspec = quadtotal[(quadtotal$pval<0.05) &
(!is.na(quadtotal$pval)),]
tranraw = read.csv("subtidal_transect_raw.csv", stringsAsFactors = F)
# remove Clayquot data
tranraw = tranraw[!tranraw$region=="Clayquot Sound",]
source('~/Documents/PNW/subtidal/subtidal_abundance.R')
sigspec
head(quadraw)
levels(quadraw$location)
unique(quadraw$location)
